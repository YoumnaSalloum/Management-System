#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Newproj
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="data")]
	public partial class db1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertSupervisor(Supervisor instance);
    partial void UpdateSupervisor(Supervisor instance);
    partial void DeleteSupervisor(Supervisor instance);
    #endregion
		
		public db1DataContext() : 
				base(global::Newproj.Properties.Settings.Default.dataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public db1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public db1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Supervisor> Supervisors
		{
			get
			{
				return this.GetTable<Supervisor>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PNo;
		
		private string _Name;
		
		private System.Nullable<int> _SupNo;
		
		private System.Nullable<int> _StNo;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Supervisor> _Supervisor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPNoChanging(int value);
    partial void OnPNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupNoChanging(System.Nullable<int> value);
    partial void OnSupNoChanged();
    partial void OnStNoChanging(System.Nullable<int> value);
    partial void OnStNoChanged();
    #endregion
		
		public Project()
		{
			this._Student = default(EntityRef<Student>);
			this._Supervisor = default(EntityRef<Supervisor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PNo
		{
			get
			{
				return this._PNo;
			}
			set
			{
				if ((this._PNo != value))
				{
					this.OnPNoChanging(value);
					this.SendPropertyChanging();
					this._PNo = value;
					this.SendPropertyChanged("PNo");
					this.OnPNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupNo", DbType="Int")]
		public System.Nullable<int> SupNo
		{
			get
			{
				return this._SupNo;
			}
			set
			{
				if ((this._SupNo != value))
				{
					if (this._Supervisor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupNoChanging(value);
					this.SendPropertyChanging();
					this._SupNo = value;
					this.SendPropertyChanged("SupNo");
					this.OnSupNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StNo", DbType="Int")]
		public System.Nullable<int> StNo
		{
			get
			{
				return this._StNo;
			}
			set
			{
				if ((this._StNo != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStNoChanging(value);
					this.SendPropertyChanging();
					this._StNo = value;
					this.SendPropertyChanged("StNo");
					this.OnStNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Project", Storage="_Student", ThisKey="StNo", OtherKey="StNo", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._StNo = value.StNo;
					}
					else
					{
						this._StNo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supervisor_Project", Storage="_Supervisor", ThisKey="SupNo", OtherKey="SupNo", IsForeignKey=true)]
		public Supervisor Supervisor
		{
			get
			{
				return this._Supervisor.Entity;
			}
			set
			{
				Supervisor previousValue = this._Supervisor.Entity;
				if (((previousValue != value) 
							|| (this._Supervisor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supervisor.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Supervisor.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._SupNo = value.SupNo;
					}
					else
					{
						this._SupNo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supervisor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StNo;
		
		private string _Name;
		
		private System.Nullable<int> _Dep;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStNoChanging(int value);
    partial void OnStNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDepChanging(System.Nullable<int> value);
    partial void OnDepChanged();
    #endregion
		
		public Student()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StNo
		{
			get
			{
				return this._StNo;
			}
			set
			{
				if ((this._StNo != value))
				{
					this.OnStNoChanging(value);
					this.SendPropertyChanging();
					this._StNo = value;
					this.SendPropertyChanged("StNo");
					this.OnStNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dep", DbType="Int")]
		public System.Nullable<int> Dep
		{
			get
			{
				return this._Dep;
			}
			set
			{
				if ((this._Dep != value))
				{
					this.OnDepChanging(value);
					this.SendPropertyChanging();
					this._Dep = value;
					this.SendPropertyChanged("Dep");
					this.OnDepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Project", Storage="_Projects", ThisKey="StNo", OtherKey="StNo")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supervisor")]
	public partial class Supervisor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SupNo;
		
		private string _Name;
		
		private System.Nullable<int> _Salary;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupNoChanging(int value);
    partial void OnSupNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSalaryChanging(System.Nullable<int> value);
    partial void OnSalaryChanged();
    #endregion
		
		public Supervisor()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupNo
		{
			get
			{
				return this._SupNo;
			}
			set
			{
				if ((this._SupNo != value))
				{
					this.OnSupNoChanging(value);
					this.SendPropertyChanging();
					this._SupNo = value;
					this.SendPropertyChanged("SupNo");
					this.OnSupNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Int")]
		public System.Nullable<int> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supervisor_Project", Storage="_Projects", ThisKey="SupNo", OtherKey="SupNo")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Supervisor = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Supervisor = null;
		}
	}
}
#pragma warning restore 1591
